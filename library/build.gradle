/*
 * Copyright (C) 2018 nyris GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'signing'
}

apply {
    from 'git-version.gradle'
    from 'maven-publish.gradle'
}

def getDefaultPublishConfig = { ->
    def publishConfig = System.getenv("SDK_DEFAULT_PUBLISH_CONFIG")
    if (publishConfig == null || publishConfig.isEmpty()) {
        publishConfig = "prodRelease"
    }
    return publishConfig
}

kapt {
    correctErrorTypes true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        aarMetadata {
            minCompileSdk = rootProject.ext.minSdkVersion
        }
    }


    buildTypes {
        debug {
            buildConfigField "String", "GIT_COMMIT_HASH", "\"" + gitCommitHash + "\""
            buildConfigField "String", "SDK_VERSION", "\"" + gitVersionName + "\""
        }
        release {
            minifyEnabled true
            buildConfigField "String", "GIT_COMMIT_HASH", "\"" + gitCommitHash + "\""
            buildConfigField "String", "SDK_VERSION", "\"" + gitVersionName + "\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/di'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/di/component'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/di/module'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/di/qualifier'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/di/qualifier/network'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/di/qualifier/sdk'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/base'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/imagematching'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/notfoundmatching'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/offermanager'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/offersimilarity'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/textsearch'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/feedback'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/api/regions'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/model'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/network/service'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/utils'
        main.java.srcDirs += 'src/main/java/io/nyris/sdk/utils/rx'


        test.java.srcDirs += 'src/test/java/io/nyris/sdk/rules'
        test.java.srcDirs += 'src/test/java/io/nyris/sdk/unit'
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    namespace 'io.nyris.sdk'
    publishing {
        singleVariant('prdRelease') {
            withSourcesJar()
        }
    }
}

dependencies {

    //Test
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powermockVersion"

    // parser
    implementation "com.google.code.gson:gson:$gsonVersion"

    // dependency injection
    implementation "com.google.dagger:dagger:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"
    implementation "com.google.dagger:dagger-android:$dagger2Version"
    kapt "com.google.dagger:dagger-android-processor:$dagger2Version"

    // reactive
    api "io.reactivex.rxjava2:rxjava:$rxjava2Version"

    //Network
    api "com.squareup.retrofit2:retrofit:$retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2Version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit2Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtensionsVersion"
}
